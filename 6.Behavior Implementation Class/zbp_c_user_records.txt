CLASS zbp_c_user_records DEFINITION PUBLIC ABSTRACT FINAL FOR BEHAVIOR OF z_c_user_records.
ENDCLASS.

CLASS zbp_c_user_records IMPLEMENTATION.
ENDCLASS.
CLASS lhc_user_records DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION
      IMPORTING keys REQUEST requested_authorizations FOR user_records RESULT result.

    METHODS create_user FOR DETERMINE ON SAVE
      IMPORTING keys FOR user_records~create_user.

ENDCLASS.

CLASS lhc_user_records IMPLEMENTATION.

  METHOD get_instance_authorizations.
  ENDMETHOD.

  METHOD create_user.
    " check if TravelID is already filled
    READ ENTITIES OF z_c_user_records IN LOCAL MODE
      ENTITY user_records
        FIELDS ( UserId ) WITH CORRESPONDING #( keys )
      RESULT DATA(lt_user_records).

    " remove lines where TravelID is already filled.
    DELETE lt_user_records WHERE userId IS NOT INITIAL.
    IF lt_user_records IS INITIAL.
      RETURN.
    ENDIF.

    " Select max travel ID
    SELECT SINGLE MAX( UserId ) AS user_recordsid
        FROM  z_c_user_records
        INTO @DATA(lv_maxuser_records).
*    " Set the travel ID
    MODIFY ENTITIES OF z_c_user_records IN LOCAL MODE
    ENTITY user_records
      UPDATE
        FROM VALUE #( FOR user_records IN lt_user_records INDEX INTO lv_index (
          %tky              = user_records-%tky
          userId          = 'CB' && CONV znumc06( lv_maxuser_records+2   + lv_index )
          %control-UserId = if_abap_behv=>mk-on ) )
          MAPPED DATA(mapped)
    REPORTED DATA(update_reported).
    reported = CORRESPONDING #( DEEP update_reported ).
  ENDMETHOD.

ENDCLASS.